{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","Negociacao","NegociacaoDao","NegociacaoService","_http","get","then","negociacoes","map","Date","i","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaTrasada","results","reduce","flat","result","concat","negociacao","getConnection","connection","negociacaoDao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","n","isEquals"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,gBAAAA,W;;AACAC,6B,sBAAAA,iB;;AACAC,sB,oBAAAA,U;;AACAC,yB,sBAAAA,a;;;;;;;;;;;;;;;;;;;;;yCAEKC,iB;AAET,6CAAc;AAAA;;AACV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;;;+DAE0B;AACvB,+BAAO,KAAKK,KAAL,CAAWC,GAAX,CAAe,oBAAf,EACFC,IADE,CACG;AAAA,mCAAeC,YAAYC,GAAZ,CAAgB;AAAA,uCAAK,IAAIP,UAAJ,CAAe,IAAIQ,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,6BAAhB,CAAf;AAAA,yBADH,EAEFC,KAFE,CAEI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH,yBALE,CAAP;AAMH;;;uEAEkC;AAC/B,+BAAO,KAAKd,KAAL,CAAWC,GAAX,CAAe,sBAAf,EACFC,IADE,CACG;AAAA,mCAAeC,YAAYC,GAAZ,CAAgB;AAAA,uCAAK,IAAIP,UAAJ,CAAe,IAAIQ,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,6BAAhB,CAAf;AAAA,yBADH,EAEFC,KAFE,CAEI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH,yBALE,CAAP;AAMH;;;sEAEiC;AAC9B,+BAAO,KAAKd,KAAL,CAAWC,GAAX,CAAe,uBAAf,EACFC,IADE,CACG;AAAA,mCAAeC,YAAYC,GAAZ,CAAgB;AAAA,uCAAK,IAAIP,UAAJ,CAAe,IAAIQ,IAAJ,CAASC,EAAEC,IAAX,CAAf,EAAiCD,EAAEE,UAAnC,EAA+CF,EAAEG,KAAjD,CAAL;AAAA,6BAAhB,CAAf;AAAA,yBADH,EAEFC,KAFE,CAEI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACH,yBALE,CAAP;AAMH;;;uDAEkB;AACf,+BAAOC,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,+BAAL,EAHe,CAAZ,EAIJjB,IAJI,CAIC;AAAA,mCAAWkB,QAAQC,MAAR,CAAe,UAACC,IAAD,EAAOC,MAAP;AAAA,uCAAkBD,KAAKE,MAAL,CAAYD,MAAZ,CAAlB;AAAA,6BAAf,EAAsD,EAAtD,CAAX;AAAA,yBAJD,EAKNb,KALM,CAKA,gBAAQ;AAAC,kCAAMG,IAAN;AAAY,yBALrB,CAAP;AAMH;;;6CAEQY,U,EAAY;AACjB,+BAAO7B,kBAAkB8B,aAAlB,GACFxB,IADE,CACG;AAAA,mCAAc,IAAIJ,aAAJ,CAAkB6B,UAAlB,CAAd;AAAA,yBADH,EAEFzB,IAFE,CAEG;AAAA,mCAAiB0B,cAAcC,QAAd,CAAuBJ,UAAvB,CAAjB;AAAA,yBAFH,EAGFvB,IAHE,CAGG;AAAA,mCAAM,oCAAN;AAAA,yBAHH,EAIFQ,KAJE,CAII,gBAAQ;AACX,kCAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,yBANE,CAAP;AAOH;;;4CAEO;AACJ,+BAAOjB,kBAAkB8B,aAAlB,GACFxB,IADE,CACG;AAAA,mCAAc,IAAIJ,aAAJ,CAAkB6B,UAAlB,CAAd;AAAA,yBADH,EAEFzB,IAFE,CAEG;AAAA,mCAAiB0B,cAAcE,UAAd,EAAjB;AAAA,yBAFH,EAGFpB,KAHE,CAGI,gBAAQ;AACX,kCAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,yBALE,CAAP;AAMH;;;4CAEO;AACJ,+BAAOjB,kBAAkB8B,aAAlB,GACFxB,IADE,CACG;AAAA,mCAAc,IAAIJ,aAAJ,CAAkB6B,UAAlB,CAAd;AAAA,yBADH,EAEFzB,IAFE,CAEG;AAAA,mCAAiB0B,cAAcG,UAAd,EAAjB;AAAA,yBAFH,EAGF7B,IAHE,CAGG;AAAA,mCAAM,mCAAN;AAAA,yBAHH,EAIFQ,KAJE,CAII,gBAAQ;AACX,kCAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,yBANE,CAAP;AAOH;;;4CAEOmB,U,EAAY;AAChB,+BAAO,KAAKC,gBAAL,GACF/B,IADE,CACG;AAAA,mCAAeC,YAChB+B,MADgB,CACT;AAAA,uCAAc,CAACF,WAAWG,IAAX,CAAgB;AAAA,2CAAKC,EAAEC,QAAF,CAAWZ,UAAX,CAAL;AAAA,iCAAhB,CAAf;AAAA,6BADS,CAAf;AAAA,yBADH,EAGFf,KAHE,CAGI,gBAAQ;AACX,kCAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,yBALE,CAAP;AAMH","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from \"./HttpService\";\r\nimport {ConnectionFactory} from \"./ConnectionFactory\";\r\nimport {Negociacao} from \"../model/Negociacao\";\r\nimport {NegociacaoDao} from \"../daos/NegociacaoDao\";\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return this._http.get('negociacoes/semana')\r\n            .then(negociacoes => negociacoes.map(i => new Negociacao(new Date(i.data), i.quantidade, i.valor)))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao importar negociações da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return this._http.get('negociacoes/anterior')\r\n            .then(negociacoes => negociacoes.map(i => new Negociacao(new Date(i.data), i.quantidade, i.valor)))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao importar negociações da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaTrasada() {\r\n        return this._http.get('negociacoes/retrasada')\r\n            .then(negociacoes => negociacoes.map(i => new Negociacao(new Date(i.data), i.quantidade, i.valor)))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao importar negociações da semana retrasada');\r\n            });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaTrasada(),\r\n        ]).then(results => results.reduce((flat, result) => flat.concat(result), []))\r\n        .catch(erro => {throw erro;});\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(negociacaoDao => negociacaoDao.adiciona(negociacao))\r\n            .then(() => \"Negociação adicionada com sucesso!\")\r\n            .catch(erro => {\r\n                throw new Error(erro)\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(negociacaoDao => negociacaoDao.listaTodos())\r\n            .catch(erro => {\r\n                throw new Error(erro)\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(negociacaoDao => negociacaoDao.apagaTodos())\r\n            .then(() => \"Negociações apagadas com sucesso!\")\r\n            .catch(erro => {\r\n                throw new Error(erro)\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => negociacoes\r\n                .filter(negociacao => !listaAtual.some(n => n.isEquals(negociacao))))\r\n            .catch(erro => {\r\n                throw new Error(erro)\r\n            });\r\n    }\r\n}\r\n"]}