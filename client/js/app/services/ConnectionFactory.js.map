{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_criaStores","e","target","result","onsuccess","onerror","console","log","error","name","Reflect","apply","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAMA,oBAAqB,YAAY;AACnC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIL,UAAJ,EAAgB;AACZI,gCAAQJ,UAAR;AACA;AACH;AACD,wBAAIM,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,WAAlB,CAA8BC,EAAEC,MAAF,CAASC,MAAvC;AACH,qBAFD;AAGAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzBf,qCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,gCAAQD,WAAWC,KAAnB;AACAD,mCAAWC,KAAX,GAAmB,YAAM;AACrB,kCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGAE,gCAAQJ,UAAR;AACH,qBAPD;AAQAM,gCAAYU,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAd,+BAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;AA9BL;AAAA;AAAA,8CAgC4B;AACpB,oBAAGpB,UAAH,EAAc;AACVqB,4BAAQC,KAAR,CAAcrB,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,iCAAa,IAAb;AACH;AACJ;AArCL;AAAA;AAAA,wCAuCuBA,UAvCvB,EAuCmC;AAC3BH,uBAAO0B,OAAP,CAAe,iBAAS;AACpB,wBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACJ1B,+BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAJD;AAKH;AA7CL;;AAAA;AAAA;AA+CH,CAvDyB,EAA1B","file":"ConnectionFactory.js","sourcesContent":["const ConnectionFactory = (function () {\r\n    const stores = ['negociacoes'];\r\n    const version = 1;\r\n    const dbName = 'aluraframe';\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('DateHelper cannot be instantiated');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                if (connection) {\r\n                    resolve(connection);\r\n                    return;\r\n                }\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._criaStores(e.target.result);\r\n                };\r\n                openRequest.onsuccess = e => {\r\n                    connection = e.target.result;\r\n                    close = connection.close;\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                    resolve(connection);\r\n                };\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                Reflect.apply(close, connection, []);\r\n                connection = null;\r\n            }\r\n        }\r\n\r\n        static _criaStores(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n    }\r\n})();\r\n"]}