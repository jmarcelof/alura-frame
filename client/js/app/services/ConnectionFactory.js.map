{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_criaStores","e","target","result","onsuccess","onerror","console","log","error","name","Reflect","apply","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIN,UAAJ,EAAgB;AACZK,wCAAQL,UAAR;AACA;AACH;AACD,gCAAIO,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,WAAlB,CAA8BC,EAAEC,MAAF,CAASC,MAAvC;AACH,6BAFD;AAGAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzBhB,6CAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,wCAAQD,WAAWC,KAAnB;AACAD,2CAAWC,KAAX,GAAmB,YAAM;AACrB,0CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQL,UAAR;AACH,6BAPD;AAQAO,wCAAYU,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAtBM,CAAP;AAuBH;;;sDAEuB;AACpB,4BAAGrB,UAAH,EAAc;AACVsB,oCAAQC,KAAR,CAActB,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,yCAAa,IAAb;AACH;AACJ;;;gDAEkBA,U,EAAY;AAC3BH,+BAAO2B,OAAP,CAAe,iBAAS;AACpB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI3B,WAAW4B,iBAAX,CAA6BD,KAA7B;AACJ3B,uCAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 1;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('DateHelper cannot be instantiated');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            if (connection) {\r\n                resolve(connection);\r\n                return;\r\n            }\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._criaStores(e.target.result);\r\n            };\r\n            openRequest.onsuccess = e => {\r\n                connection = e.target.result;\r\n                close = connection.close;\r\n                connection.close = () => {\r\n                    throw new Error('Você não pode fechar diretamente a conexão');\r\n                };\r\n                resolve(connection);\r\n            };\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            Reflect.apply(close, connection, []);\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n    static _criaStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n}\r\n"]}