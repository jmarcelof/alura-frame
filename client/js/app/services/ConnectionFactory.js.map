{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_criaStores","target","result","onsuccess","onerror","console","log","error","name","closeConnection","Reflect","apply","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":"AAAA,MAAMA,oBAAqB,YAAY;AACnC,UAAMC,SAAS,CAAC,aAAD,CAAf;AACA,UAAMC,UAAU,CAAhB;AACA,UAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA,WAAO,MAAML,iBAAN,CAAwB;;AAE3BM,sBAAc;AACV,kBAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,eAAOC,aAAP,GAAuB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,oBAAIP,UAAJ,EAAgB;AACZM,4BAAQN,UAAR;AACA;AACH;AACD,oBAAIQ,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAU,4BAAYI,eAAZ,GAA8BC,KAAK;AAC/BjB,sCAAkBkB,WAAlB,CAA8BD,EAAEE,MAAF,CAASC,MAAvC;AACH,iBAFD;AAGAR,4BAAYS,SAAZ,GAAwBJ,KAAK;AACzBb,iCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,4BAAQD,WAAWC,KAAnB;AACAD,+BAAWC,KAAX,GAAmB,MAAM;AACrB,8BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qBAFD;AAGAG,4BAAQN,UAAR;AACH,iBAPD;AAQAQ,4BAAYU,OAAZ,GAAsBL,KAAK;AACvBM,4BAAQC,GAAR,CAAYP,EAAEE,MAAF,CAASM,KAArB;AACAd,2BAAOM,EAAEE,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aAtBM,CAAP;AAuBH;;AAED,eAAOC,eAAP,GAAwB;AACpB,gBAAGvB,UAAH,EAAc;AACVwB,wBAAQC,KAAR,CAAcxB,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,6BAAa,IAAb;AACH;AACJ;;AAED,eAAOc,WAAP,CAAmBd,UAAnB,EAA+B;AAC3BH,mBAAO6B,OAAP,CAAeC,SAAS;AACpB,oBAAI3B,WAAW4B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACI3B,WAAW8B,iBAAX,CAA6BH,KAA7B;AACJ3B,2BAAW+B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,aAJD;AAKH;AA7C0B,KAA/B;AA+CH,CAvDyB,EAA1B","file":"ConnectionFactory.js","sourcesContent":["const ConnectionFactory = (function () {\n    const stores = ['negociacoes'];\n    const version = 1;\n    const dbName = 'aluraframe';\n\n    let connection = null;\n    let close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('DateHelper cannot be instantiated');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                if (connection) {\n                    resolve(connection);\n                    return;\n                }\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._criaStores(e.target.result);\n                };\n                openRequest.onsuccess = e => {\n                    connection = e.target.result;\n                    close = connection.close;\n                    connection.close = () => {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                    resolve(connection);\n                };\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static closeConnection(){\n            if(connection){\n                Reflect.apply(close, connection, []);\n                connection = null;\n            }\n        }\n\n        static _criaStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n    }\n})();\n"]}